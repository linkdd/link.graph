(* keywords definition *)

@@keyword :: TRUE FALSE
@@keyword :: AS
@@keyword :: ELTS
@@keyword :: GRAPHS
@@keyword :: DEPTH WIDE
@@keyword :: FROM
@@keyword :: WHERE AND
@@keyword :: INSERT
@@keyword :: SELECT
@@keyword :: SET UNSET ADDTOSET DELFROMSET
@@keyword :: UPDATE
@@keyword :: DELETE

(* symbols definition *)

digit = /[0-9]/ ;
symbol = /[a-zA-Z]/ ;
characters = /\w*/ ;

(* basic type definition *)

@name
identifier::IdentifierNode = name:(/[_a-zA-Z][a-zA-Z0-9_]*/) ;
string::StringNode = '"' value:characters '"' | "'" value:characters "'" ;
natural = { digit }+ ;
sign = "+" | "-" ;
integer::IntegerNode = value:([ sign ] natural) ;
decimal::DecimalNode = value:([ sign ] natural "." natural) ;
boolean::BooleanNode = value:("TRUE" | "FALSE") ;

(* complex type definition *)

value::ValueNode = value:string | value:integer | value:decimal | value:boolean ;
property_name = identifier ;
alias = identifier ;
aliased_property::AliasedProperty = alias:alias "." propname:property_name ;
aliases = ",".{ alias:alias } ;
cond_operator = ">" | "<" | ">=" | "<=" | "=" | "!=" | "~=" ;

expression::ExpressionNode = value:value | aprop:aliased_property ;

type = identifier ;
types = ",".{ type } ;
property_cond::PropertyConditionNode = propname:property_name op:cond_operator expr:expression ;
properties_cond::PropertyConditionsBlockNode = conditions:(",".{ property_cond }) ;

(* walkthrough elements definition *)

elements::ElementsNode = "(" types:types ")" [ "{" props:properties_cond "}" ] ;
aliased_elements::AliasedElementsNode = elts:elements [ "AS" alias:alias ] ;

graph_joint = "ELTS" ;
elt_joint = "GRAPHS" ;

backward = "<" | "-" ;
forward = "-" | ">" ;
cardinality = [ natural ] [ ".." ] [ natural ] ;
walk_mode = "DEPTH" | "WIDE" ;
base_joint = bw:backward aelts:aliased_elements fw:forward [ card:cardinality ] [ wmode:walk_mode ] ;

node_joint = base_joint ;
relationship_joint = base_joint ;

joint::JointNode = gjoint:graph_joint | ejoint:elt_joint | njoint:node_joint | rjoint:relationship_joint ;

path::PathNode = aelts:aliased_elements { joint:joint [ aelts:aliased_elements ] } ;
walkthrough_stmt::WalkthroughStatementNode = "FROM" path:path ;
walkthrough_stmts::WalkthroughBlockNode = { walkstmt+:walkthrough_stmt }+ ;

(* filter elements definition *)

condition = prop:aliased_property op:cond_operator expr:expression ;
filter_stmt = "WHERE" "AND".{ filter+:condition } ;

(* CRUD elements definition *)

new_property = propname:property_name "=" expr:expression ;
new_properties = ",".{ new_property } ;
new_cardinality = natural ;
new_data = "(" type:type props+:new_properties ")" [ "AS" alias:alias ] [ card:new_cardinality ] ;
create_stmt::CreateStatementNode = "INSERT" ",".{ data+:new_data } ;

read_stmt::ReadStatementNode = "SELECT" aliases+:aliases ;

update_keyword = "SET" | "UNSET" | "ADDTOSET" | "DELFROMSET" ;
update_alias = alias:alias op:update_keyword expr:expression ;
update_data = ",".{ update_alias } ;
update_stmt::UpdateStatementNode = "UPDATE" data+:update_data ;

delete_stmt::DeleteStatementNode = "DELETE" aliases+:aliases ;

crud_stmt::CRUDStatementNode = create:create_stmt | read:read_stmt | update:update_stmt | delete:delete_stmt ;

(* Request final definition *)

request::RequestNode = walkthrough:walkthrough_stmts filter:filter_stmt crud:crud_stmt ;

start = request ;