(* keyword definition *)

@@keyword :: TRUE FALSE
@@keyword :: RELS NODES
@@keyword :: DEPTH BREADTH
@@keyword :: BACKWARD FORWARD BOTH
@@keyword :: FOLLOW
@@keyword :: FROM TO
@@keyword :: NODE REL
@@keyword :: WHERE AND OR
@@keyword :: AS
@@keyword :: INSERT SELECT UPDATE DELETE

(*/keyword definition *)

(* symbols definition *)

digit = /[0-9]/ ;
symbol = /[a-zA-Z]/ ;
characters = /\w*/ ;

(*/symbols definition *)

(* basic type definitions *)
string::StringNode = '"' value:characters '"' | "'" value:characters "'" ;
natural::NaturalNode = value:({ digit }+) ;
sign = "+" | "-" ;
integer::IntegerNode = value:([ sign:sign ] int:natural) ;
decimal::DecimalNode = value:([ sign:sign ] int:natural "." dec:natural) ;
boolean::BooleanNode = value:("TRUE" | "FALSE") ;
(*/basic type definitions *)

(* basic definitions *)

@name
identifier::IdentifierNode = name:(/[_a-zA-Z][a-zA-Z0-9_]*/) ;
alias::AliasNode = name:identifier ;
type::TypeNode = name:identifier ;
value::ValueNode = value:(string | integer | decimal | boolean) ;

operator::OperatorNode = value:("<" | "<=" | "==" | "!=" | ">=" | ">" | "~=") ;
condition::ConditionNode = propname:identifier op:operator value:value ;
assign::AssignNode = propname:identifier "=" value:value ;

(*/basic definitions *)

(* Type list *)
type_list::TypeListNode = "(" values:(",".{ type }) ")" ;
(*/Type list *)

(* Property filter *)
prop_filter::PropertyFilterNode = "{" conditions:(",".{ condition }) "}" ;
(*/Property filter *)

(* Walk filter *)
relation_filter::RelationFilterNode = "RELS" types:type_list properties:prop_filter ;
node_filter::NodeFilterNode = "NODES" types:type_list properties:prop_filter ;
walkfilter::WalkFilterNode = (typed:relation_filter | typed:node_filter) [ "AS" alias:alias ] ;
(*/Walk filter *)

(* FOLLOW *)
follow_type::FollowTypeNode = value:("DEPTH" | "BREADTH") ;
direction::DirectionNode = value:("BACKWARD" | "FORWARD" | "BOTH") ;
cardinality::CardinalityNode = begin:natural ".." end:natural ;
follow::FollowNode = "FOLLOW" type:follow_type direction:direction cardinality:cardinality [ filter:walkfilter ] ;
(*/FOLLOW *)

(* FROM *)
walkstmt::WalkStatementNode = "FROM" filter:walkfilter [ follow:{ follow }+ ] ;
(*/FROM *)

(* Request filter *)
andreqfilter::AndRequestFilterNode = left:(reqfilter | termreqfilter) "AND" right:(termreqfilter | reqfilter) ;
orreqfilter::OrRequestFilterNode = left:(reqfilter | termreqfilter) "OR" right:(termreqfilter | reqfilter) ;
termreqfilter::TermRequestFilterNode = alias:alias "." propname:identifier op:operator value:value ;
reqfilter::RequestFilterNode = search:(andreqfilter | orreqfilter | termreqfilter) ;
(*/Request filter *)

(* CREATE *)
eltprops::ElementPropertiesNode = "{" assignations:(",".{ assign }) "}" ;

node_type::NodeTypeNode = "NODE" types:type_list properties:eltprops [ "AS" alias:alias ] ;

links::LinksNode = "FROM" source:(alias | node_filter) "TO" target:(alias | node_filter) ;
relation_type::RelationTypeNode = "REL" types:type_list properties:eltprops [ "AS" alias:alias ] links:links ;

createstmt::CreateStatementNode = "INSERT" (typed:node_type | typed:relation_type) ;
(*/CREATE *)

(* READ *)
readstmt::ReadStatementNode = "SELECT" aliases:(",".{ alias }) "WHERE" filter:reqfilter ;
(*/READ *)

(* UPDATE *)
updatestmt::UpdateStatementNode = "UPDATE" "(" assignations:(",".{ assign }) ")" ;
(*/UPDATE *)

(* DELETE *)
deletestmt::DeleteStatementNode = "DELETE" aliased:(",".{ alias }) "WHERE" filter:reqfilter ;
(*/DELETE *)

(* Request *)
walkthrough::WalkthroughBlock = statements:{ walkstmt }+ ;
crud::CRUDBlock = statements:{ createstmt | readstmt | updatestmt | deletestmt }+ ;

request::RequestNode = [ walkthrough:walkthrough ] crud:crud ;
(*/Request *)

start = request ;