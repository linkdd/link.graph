(* keyword definition *)

@@keyword :: TRUE FALSE
@@keyword :: DEPTH BREADTH
@@keyword :: BACKWARD FORWARD BOTH
@@keyword :: FROM THROUGH TO
@@keyword :: SOURCE TARGET
@@keyword :: NODE REL
@@keyword :: AS
@@keyword :: SET UNSET ADDTOSET DELFROMSET
@@keyword :: INSERT SELECT UPDATE DELETE

(*/keyword definition *)

(* symbols definition *)

digits = /[0-9]+/ ;
characters = /\w*/ ;

(*/symbols definition *)

(* basic type definitions *)
string::StringNode = '"' value:characters '"' | "'" value:characters "'" ;
natural::NaturalNode = value:digits ;
sign = "+" | "-" ;
integer::IntegerNode = value:([ sign:sign ] int:natural) ;
decimal::DecimalNode = value:([ sign:sign ] int:natural "." dec:natural) ;
boolean::BooleanNode = value:("TRUE" | "FALSE") ;
(*/basic type definitions *)

(* basic definitions *)

@name
identifier::IdentifierNode = name:(/[_a-zA-Z][a-zA-Z0-9_]*/) ;
alias::AliasNode = name:identifier ;
type::TypeNode = name:identifier ;
value::ValueNode = value:(string | integer | decimal | boolean) ;

updateop::UpdateOperatorNode = value:("SET" | "ADDTOSET" | "UNSET" | "DELFROMSET");
condop::ConditionalOperatorNode = value:("<" | "<=" | "=" | "!=" | ">=" | ">" | "~=") ;
condition::ConditionNode = propname:identifier op:condop value:value ;

(*/basic definitions *)

(* Type list *)
type_list::TypeListNode = "(" values:{ type }* ")" ;
(*/Type list *)

(* Filter *)
termfilter::TermFilterNode = propname:identifier op:condop value:value ;
andfilter::AndFilterNode = left:(filter | termfilter) "AND" right:(termfilter | filter) ;
orfilter::OrFilterNode = left:(filter | termfilter) "OR" right:(termfilter | filter) ;
search::SearchNode = value:(andfilter | orfilter | termfilter) ;
innerfilter::InnerFilterNode = search:search ;

filter::FilterNode = "{" [ filter:innerfilter ] "}" ;
type_filter::TypedFilterNode = [ types:type_list ] filter:filter ;
(*/Filter *)

(* WALK *)

from::FromNode = "FROM" set:alias filter:type_filter "AS" alias:alias ;

walk_type::FollowTypeNode = value:("DEPTH" | "BREADTH") ;
direction::DirectionNode = value:("BACKWARD" | "FORWARD" | "BOTH") ;
walkmode::WalkModeNode = [ type:walk_type ] [ direction:direction ] [ begin:natural ] [ end:(natural | "*") ] ;
through::ThroughNode = "THROUGH" set:alias [ filter:type_filter ] [ "AS" alias:alias ] [ wmode:walkmode ] ;
to::ToNode = "TO" [ filter:type_filter ] alias:alias ;

path::PathNode = through:{ through }+ to:{ to }+ ;
walkstmt::WalkStatementNode = froms:{ from }+ path:{ path }* ;

(*/WALK *)

(* CREATE *)
assignset::AssignSetNode = "SET" propname:identifier value:value ;
assignaddtoset::AssignAddNode = "ADDTOSET" propname:identifier value:value ;
assign::AssignNode = value:(assignset | assignaddtoset) ;

eltprops::ElementPropertiesNode = "{" assignations:{ assign }* "}" ;

node_type::NodeTypeNode = "NODE" types:type_list properties:eltprops [ "AS" alias:alias ] ;

links::LinksNode = "SOURCE" source:(alias | type_filter) "TARGET" target:(alias | type_filter) ;
relation_type::RelationTypeNode = "REL" types:type_list properties:eltprops [ "AS" alias:alias ] links:links ;

createstmt::CreateStatementNode = "INSERT" (typed:node_type | typed:relation_type) ;
(*/CREATE *)

(* READ *)
readstmt::ReadStatementNode = "SELECT" aliases:",".{ alias } ;
(*/READ *)

(* UPDATE *)
updatesetprop::UpdateSetPropertyNode = "SET" alias:alias "." propname:identifier value:value ;
updateunsetprop::UpdateUnsetPropertyNode = "UNSET" alias:alias "." propname:identifier ;
updateaddprop::UpdateAddPropertyNode = "ADDTOSET" alias:alias "." propname:identifier value:value ;
updatedelprop::UpdateDelPropertyNode = "DELFROMSET" alias:alias "." propname:identifier value:value ;
updateprop::UpdatePropertyNode = value:(updatesetprop | updateunsetprop | updateaddprop | updatedelprop) ;
updatestmt::UpdateStatementNode = "UPDATE" "(" updates:{ updateprop }+ ")" ;
(*/UPDATE *)

(* DELETE *)
deletestmt::DeleteStatementNode = "DELETE" aliases:",".{ alias } ;
(*/DELETE *)

(* Request *)
crudstmt::CRUDStatementNode = statement:(createstmt | readstmt | updatestmt | deletestmt) ;
crud::CRUDBlock = statements:{ crudstmt }+ ;

request::RequestNode = walkthrough:{ walkstmt }* crud:crud ;
(*/Request *)

start = request ;
